'[[[cog 
'  import cog
'  import cppstate
'  
'  # load configuration
'  states, id_of_state, transitions, config = cppstate.helper.load_config()
'
']]]
'[[[end]]]

@startuml StateMachine

'[[[cog 
'  first_state = states[0]
'  cog.outl("[*] --> {}".format(first_state)) 
'  from_count = {}
'  max_count = {}
'  for transition in transitions:
'    max_count[transition['from']] = max_count.get(transition['from'], -1) +1
'
'  for transition in transitions:
'    from_count[transition['from']] =  from_count.get(transition['from'], -1) +1
'    count = max_count[transition['from']] - from_count[transition['from']]
'    cog.outl("{} --> {} : {}check{}()".format(transition['from'], transition['to'], '<&media-record>'*count, transition['name'])) 
'  for state in states:
'    cog.outl("{}: <i>entry(lastState)</i>".format(state))
'    cog.outl("{}: <i>update()</i>".format(state)) 
'    cog.outl("{}: <i>exit(nextState)</i>".format(state)) 
']]]
'[[[end]]]
@enduml 