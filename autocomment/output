-->
-->DOXY(" \file"#7)
-->DOXY(" \copyright Festo AG & Co. KG, Esslingen. All rights reserved."#17)
-->DOXY(" \author cgg"#83)
-->
-->DOXY(" Definition of the driver component to use libRTE in a oop environment"#103)
-->
HASH("#"#178)STRING("pragma"#179)WS(" "#185)STRING("once"#186)NL("\n"#190)
NL("\n"#191)
HASH("#"#192)STRING("include"#193)WS(" "#200)QUOTE("""#201)STRING("IRteConfiguration"#202)DOT("."#219)STRING("h"#220)QUOTE("""#221)NL("\n"#222)
HASH("#"#223)STRING("include"#224)WS(" "#231)QUOTE("""#232)STRING("LibRteDeviceDescription"#233)DOT("."#256)STRING("h"#257)QUOTE("""#258)NL("\n"#259)
HASH("#"#260)STRING("include"#261)WS(" "#268)QUOTE("""#269)STRING("LibRteDiagnosis"#270)DOT("."#285)STRING("h"#286)QUOTE("""#287)NL("\n"#288)
HASH("#"#289)STRING("include"#290)WS(" "#297)QUOTE("""#298)STRING("LibRteFirmwareUpdateChannel"#299)DOT("."#326)STRING("h"#327)QUOTE("""#328)NL("\n"#329)
HASH("#"#330)STRING("include"#331)WS(" "#338)QUOTE("""#339)STRING("LibRteMailboxManager"#340)DOT("."#360)STRING("h"#361)QUOTE("""#362)NL("\n"#363)
HASH("#"#364)STRING("include"#365)WS(" "#372)QUOTE("""#373)STRING("LibRteModuleConfig"#374)DOT("."#392)STRING("h"#393)QUOTE("""#394)NL("\n"#395)
HASH("#"#396)STRING("include"#397)WS(" "#404)QUOTE("""#405)STRING("LibRteNrtDriver"#406)DOT("."#421)STRING("h"#422)QUOTE("""#423)NL("\n"#424)
HASH("#"#425)STRING("include"#426)WS(" "#433)QUOTE("""#434)STRING("LibRteProcessManager"#435)DOT("."#455)STRING("h"#456)QUOTE("""#457)NL("\n"#458)
HASH("#"#459)STRING("include"#460)WS(" "#467)QUOTE("""#468)STRING("LibRteWatchdog"#469)DOT("."#483)STRING("h"#484)QUOTE("""#485)NL("\n"#486)
HASH("#"#487)STRING("include"#488)WS(" "#495)QUOTE("""#496)STRING("FMCTypes"#497)DOT("."#505)STRING("h"#506)QUOTE("""#507)NL("\n"#508)
HASH("#"#509)STRING("include"#510)WS(" "#517)QUOTE("""#518)STRING("FMCReturnCodes"#519)DOT("."#533)STRING("h"#534)QUOTE("""#535)NL("\n"#536)
NL("\n"#537)
HASH("#"#538)STRING("include"#539)WS(" "#546)QUOTE("""#547)STRING("ComponentBaseLrte"#548)DOT("."#565)STRING("h"#566)QUOTE("""#567)NL("\n"#568)
HASH("#"#569)STRING("include"#570)WS(" "#577)QUOTE("""#578)STRING("librte"#579)DOT("."#585)STRING("h"#586)QUOTE("""#587)NL("\n"#588)
HASH("#"#589)STRING("include"#590)WS(" "#597)QUOTE("""#598)STRING("sciopta"#599)DOT("."#606)STRING("h"#607)QUOTE("""#608)NL("\n"#609)
HASH("#"#610)STRING("include"#611)WS(" "#618)QUOTE("""#619)STRING("inline"#620)DOT("."#626)STRING("h"#627)QUOTE("""#628)NL("\n"#629)
NL("\n"#630)
HASH("#"#631)STRING("include"#632)WS(" "#639)QUOTE("""#640)STRING("IEtherCatDriver"#641)DOT("."#656)STRING("h"#657)QUOTE("""#658)NL("\n"#659)
HASH("#"#660)STRING("include"#661)WS(" "#668)QUOTE("""#669)STRING("IProfiNetDriver"#670)DOT("."#685)STRING("h"#686)QUOTE("""#687)NL("\n"#688)
HASH("#"#689)STRING("include"#690)WS(" "#697)QUOTE("""#698)STRING("IDeviceIdentification"#699)DOT("."#720)STRING("h"#721)QUOTE("""#722)NL("\n"#723)
HASH("#"#724)STRING("include"#725)WS(" "#732)QUOTE("""#733)STRING("IMemory"#734)DOT("."#741)STRING("h"#742)QUOTE("""#743)NL("\n"#744)
HASH("#"#745)STRING("include"#746)WS(" "#753)QUOTE("""#754)STRING("IPhysicalGpioChannel"#755)DOT("."#775)STRING("h"#776)QUOTE("""#777)NL("\n"#778)
HASH("#"#779)STRING("include"#780)WS(" "#787)QUOTE("""#788)STRING("IDeviceShutdown"#789)DOT("."#804)STRING("h"#805)QUOTE("""#806)NL("\n"#807)
HASH("#"#808)STRING("include"#809)WS(" "#816)QUOTE("""#817)STRING("ISoftReset"#818)DOT("."#828)STRING("h"#829)QUOTE("""#830)NL("\n"#831)
HASH("#"#832)STRING("include"#833)WS(" "#840)QUOTE("""#841)STRING("IEtherCatStateChangeObserver"#842)DOT("."#870)STRING("h"#871)QUOTE("""#872)NL("\n"#873)
HASH("#"#874)STRING("include"#875)WS(" "#882)QUOTE("""#883)STRING("ICoeServiceDataHandler"#884)DOT("."#906)STRING("h"#907)QUOTE("""#908)NL("\n"#909)
HASH("#"#910)STRING("include"#911)WS(" "#918)QUOTE("""#919)STRING("IProcessDataConfigurationHandler"#920)DOT("."#952)STRING("h"#953)QUOTE("""#954)NL("\n"#955)
HASH("#"#956)STRING("include"#957)WS(" "#964)QUOTE("""#965)STRING("ICommunicationInformation"#966)DOT("."#991)STRING("h"#992)QUOTE("""#993)NL("\n"#994)
HASH("#"#995)STRING("include"#996)WS(" "#1003)QUOTE("""#1004)STRING("IHardwareInformation"#1005)DOT("."#1025)STRING("h"#1026)QUOTE("""#1027)NL("\n"#1028)
HASH("#"#1029)STRING("include"#1030)WS(" "#1037)QUOTE("""#1038)STRING("IFirmwareVersionInformation"#1039)DOT("."#1066)STRING("h"#1067)QUOTE("""#1068)NL("\n"#1069)
HASH("#"#1070)STRING("include"#1071)WS(" "#1078)QUOTE("""#1079)STRING("IEtherCatStateChangeHandler"#1080)DOT("."#1107)STRING("h"#1108)QUOTE("""#1109)NL("\n"#1110)
HASH("#"#1111)STRING("include"#1112)WS(" "#1119)QUOTE("""#1120)STRING("ILed"#1121)DOT("."#1125)STRING("h"#1126)QUOTE("""#1127)NL("\n"#1128)
NL("\n"#1129)
HASH("#"#1130)STRING("include"#1131)WS(" "#1138)LESS("<"#1139)STRING("atomic"#1140)MORE(">"#1146)NL("\n"#1147)
NL("\n"#1148)
HASH("#"#1149)STRING("define"#1150)WS(" "#1156)STRING("LIBRTE_FIELDBUS_TIMEOUT_IN_S"#1157)WS("         "#1185)LP("("#1194)NUMBER("1"#1195)DOT("."#1196)NUMBER("5"#1197)STRING("f"#1198)RP(")"#1199)WS("      "#1200)-->DOXY("< Timeout when no free mailbox is available (in seconds)"#1209)
HASH("#"#1266)STRING("define"#1267)WS(" "#1273)STRING("LIBRTE_MAILBOX_LOCK_TIMEOUT_IN_S"#1274)WS("     "#1306)LP("("#1311)NUMBER("1"#1312)DOT("."#1313)NUMBER("5"#1314)STRING("f"#1315)RP(")"#1316)WS("      "#1317)-->DOXY("< Timeout for a mailbox configuration lock that takes too long (in seconds)"#1326)
NL("\n"#1402)
HASH("#"#1403)STRING("define"#1404)WS(" "#1410)STRING("LIBRTE_SLEEP_TIME_IN_MS"#1411)WS("              "#1434)LP("("#1448)NUMBER("10"#1449)RP(")"#1451)WS("       "#1452)-->DOXY("< Time to sleep to wait for a request to terminate"#1462)
HASH("#"#1513)STRING("define"#1514)WS(" "#1520)STRING("LIBRTE_SLEEP_TIME_LOCK_IN_MS"#1521)WS("         "#1549)LP("("#1558)NUMBER("1"#1559)RP(")"#1560)WS("        "#1561)-->DOXY("< Time to sleep to wait for the lock (lock has shorter sleep time)"#1572)
NL("\n"#1639)
STRING("namespace"#1640)WS(" "#1649)STRING("DSL"#1650)NL("\n"#1653)
-->NL("\n"#1655)
-->STRING("namespace"#1656)WS(" "#1665)STRING("Drivers"#1666)NL("\n"#1673)
---->NL("\n"#1675)
---->NL("\n"#1676)
------>DOXY(" This class is essentially a wrapper between the object oriented world of c++"#1680)
------>DOXY(" and the ansi c librte implementation."#1761)
---->STRING("class"#1800)WS(" "#1805)STRING("LibRteDriver"#1806)WS(" "#1818)DOUBLEPOINT(":"#1819)NL("\n"#1820)
---->WS("    "#1821)STRING("public"#1825)WS(" "#1831)STRING("Autogen"#1832)DOUBLEPOINT(":"#1839)DOUBLEPOINT(":"#1840)STRING("ComponentBaseClasses"#1841)DOUBLEPOINT(":"#1861)DOUBLEPOINT(":"#1862)STRING("ComponentBaseLrte"#1863)COMMA(","#1880)NL("\n"#1881)
---->WS("    "#1882)STRING("public"#1886)WS(" "#1892)STRING("Interfaces"#1893)DOUBLEPOINT(":"#1903)DOUBLEPOINT(":"#1904)STRING("IEtherCatDriver"#1905)COMMA(","#1920)NL("\n"#1921)
---->WS("    "#1922)STRING("public"#1926)WS(" "#1932)STRING("Interfaces"#1933)DOUBLEPOINT(":"#1943)DOUBLEPOINT(":"#1944)STRING("IProfiNetDriver"#1945)COMMA(","#1960)NL("\n"#1961)
---->WS("    "#1962)STRING("public"#1966)WS(" "#1972)STRING("Interfaces"#1973)DOUBLEPOINT(":"#1983)DOUBLEPOINT(":"#1984)STRING("ILedTest"#1985)NL("\n"#1993)
------>NL("\n"#1995)
------>STRING("public"#1996)DOUBLEPOINT(":"#2002)NL("\n"#2003)
------>WS("    "#2004)-------->DOXY(" Default constructor"#2011)
WS("    "#2032)STRING("LibRteDriver"#2036)LP("("#2048)RP(")"#2049)EOC(";"#2050)NL("\n"#2051)
------>NL("\n"#2052)
------>WS("    "#2053)-------->DOXY(" Initialize the component:basic communication with fieldbus chip"#2060)
WS("    "#2125)-------->DOXY(" \param processP0Handler A reference to a librte process handler interface"#2132)
WS("    "#2207)-------->DOXY(" \param processP1Handler A reference to a librte process handler interface"#2214)
WS("    "#2289)-------->DOXY(" \param processP2Handler A reference to a librte process handler interface"#2296)
WS("    "#2371)-------->DOXY(" \param moduleConfig TODO"#2378)
WS("    "#2404)-------->DOXY(" \param communicationInformation interface for identifier of protocol variant EtherCAT, PROFINET, ..."#2411)
WS("    "#2513)-------->DOXY(" \param powerFailRTE power fail output signal for RTE Controller"#2520)
WS("    "#2585)-------->DOXY(" \param chipReset reset output"#2592)
WS("    "#2623)-------->DOXY(" \param pdIrq pdIrq output"#2630)
WS("    "#2657)-------->DOXY(" \param mbxIrq mailbox output"#2664)
WS("    "#2694)-------->DOXY(" \param memory reference to memory management component for file access"#2701)
WS("    "#2773)-------->DOXY(" \param deviceShutdown reference to device shutdown component (this interface informs when a shutdown will happen)"#2780)
WS("    "#2895)-------->DOXY(" \param reset TODO"#2902)
WS("    "#2921)-------->DOXY(" \param hardwareInformation TODO"#2928)
WS("    "#2961)-------->DOXY(" \param firmwareVersionInformation TODO"#2968)
WS("    "#3008)STRING("FMCReturnCode"#3012)WS(" "#3025)STRING("initBase"#3026)LP("("#3034)NL("\n"#3035)
------>WS("        "#3036)STRING("LibRteProcessHandler"#3044)AND("&"#3064)WS(" "#3065)STRING("processP0Handler"#3066)COMMA(","#3082)NL("\n"#3083)
------>WS("        "#3084)STRING("LibRteProcessHandler"#3092)AND("&"#3112)WS(" "#3113)STRING("processP1Handler"#3114)COMMA(","#3130)NL("\n"#3131)
------>WS("        "#3132)STRING("LibRteProcessHandler"#3140)AND("&"#3160)WS(" "#3161)STRING("processP2Handler"#3162)COMMA(","#3178)NL("\n"#3179)
------>WS("        "#3180)STRING("LibRteModuleConfig"#3188)AND("&"#3206)WS(" "#3207)STRING("moduleConfig"#3208)COMMA(","#3220)NL("\n"#3221)
------>WS("        "#3222)STRING("Interfaces"#3230)DOUBLEPOINT(":"#3240)DOUBLEPOINT(":"#3241)STRING("ICommunicationInformation"#3242)AND("&"#3267)WS(" "#3268)STRING("communicationInformation"#3269)COMMA(","#3293)NL("\n"#3294)
------>WS("        "#3295)STRING("Interfaces"#3303)DOUBLEPOINT(":"#3313)DOUBLEPOINT(":"#3314)STRING("IPhysicalGpioChannel"#3315)AND("&"#3335)WS(" "#3336)STRING("powerFailRTE"#3337)COMMA(","#3349)NL("\n"#3350)
------>WS("        "#3351)STRING("Interfaces"#3359)DOUBLEPOINT(":"#3369)DOUBLEPOINT(":"#3370)STRING("IPhysicalGpioChannel"#3371)AND("&"#3391)WS(" "#3392)STRING("chipReset"#3393)COMMA(","#3402)NL("\n"#3403)
------>WS("        "#3404)STRING("Interfaces"#3412)DOUBLEPOINT(":"#3422)DOUBLEPOINT(":"#3423)STRING("IPhysicalGpioChannel"#3424)AND("&"#3444)WS(" "#3445)STRING("pdIrq"#3446)COMMA(","#3451)NL("\n"#3452)
------>WS("        "#3453)STRING("Interfaces"#3461)DOUBLEPOINT(":"#3471)DOUBLEPOINT(":"#3472)STRING("IPhysicalGpioChannel"#3473)AND("&"#3493)WS(" "#3494)STRING("mbxIrq"#3495)COMMA(","#3501)NL("\n"#3502)
------>WS("        "#3503)STRING("Interfaces"#3511)DOUBLEPOINT(":"#3521)DOUBLEPOINT(":"#3522)STRING("IMemory"#3523)AND("&"#3530)WS(" "#3531)STRING("memory"#3532)COMMA(","#3538)NL("\n"#3539)
------>WS("        "#3540)STRING("Interfaces"#3548)DOUBLEPOINT(":"#3558)DOUBLEPOINT(":"#3559)STRING("IDeviceShutdown"#3560)AND("&"#3575)WS(" "#3576)STRING("deviceShutdown"#3577)COMMA(","#3591)NL("\n"#3592)
------>WS("        "#3593)STRING("Interfaces"#3601)DOUBLEPOINT(":"#3611)DOUBLEPOINT(":"#3612)STRING("ISoftReset"#3613)AND("&"#3623)WS(" "#3624)STRING("reset"#3625)COMMA(","#3630)NL("\n"#3631)
------>WS("        "#3632)STRING("Interfaces"#3640)DOUBLEPOINT(":"#3650)DOUBLEPOINT(":"#3651)STRING("IHardwareInformation"#3652)WS(" "#3672)AND("&"#3673)WS(" "#3674)STRING("hardwareInformation"#3675)COMMA(","#3694)NL("\n"#3695)
------>WS("        "#3696)STRING("Interfaces"#3704)DOUBLEPOINT(":"#3714)DOUBLEPOINT(":"#3715)STRING("IFirmwareVersionInformation"#3716)AND("&"#3743)WS(" "#3744)STRING("firmwareVersionInformation"#3745)NL("\n"#3771)
------>WS("    "#3772)RP(")"#3776)EOC(";"#3777)NL("\n"#3778)
------>NL("\n"#3779)
------>WS("    "#3780)-------->DOXY(" Sends all necessary device informations to bring librte into operational state"#3787)
WS("    "#3867)-------->DOXY(" \param deviceIdent  class providing device identification code"#3874)
WS("    "#3938)STRING("FMCReturnCode"#3942)WS(" "#3955)STRING("sendDeviceInformations"#3956)LP("("#3978)STRING("Interfaces"#3979)DOUBLEPOINT(":"#3989)DOUBLEPOINT(":"#3990)STRING("IDeviceIdentification"#3991)AND("&"#4012)WS(" "#4013)STRING("deviceIdent"#4014)RP(")"#4025)EOC(";"#4026)NL("\n"#4027)
------>NL("\n"#4028)
------>WS("    "#4029)-------->DOXY(" doLedTest at rte controller"#4036)
WS("    "#4065)-------->COMM(" \param state send led state"#4071)
WS("    "#4100)STRING("FMCReturnCode"#4104)WS(" "#4117)STRING("doLedTest"#4118)LP("("#4127)STRING("const"#4128)WS(" "#4133)STRING("Autogen"#4134)DOUBLEPOINT(":"#4141)DOUBLEPOINT(":"#4142)STRING("LedTestStates"#4143)WS(" "#4156)STRING("state"#4157)RP(")"#4162)EOC(";"#4163)NL("\n"#4164)
------>NL("\n"#4165)
------>WS("    "#4166)-------->DOXY(" Enables periodic transfers in librte"#4173)
WS("    "#4211)STRING("void"#4215)WS(" "#4219)STRING("enableProcessDataTransfer"#4220)LP("("#4245)RP(")"#4246)EOC(";"#4247)NL("\n"#4248)
------>NL("\n"#4249)
------>WS("    "#4250)-------->DOXY(" Enables LibRTE specific irqs"#4257)
WS("    "#4287)STRING("void"#4291)WS(" "#4295)STRING("startCyclicOperation"#4296)LP("("#4316)RP(")"#4317)EOC(";"#4318)NL("\n"#4319)
------>NL("\n"#4320)
------>WS("    "#4321)-------->DOXY(" Get Process ID of acyclic process"#4328)
WS("    "#4363)-------->DOXY(" \retval ID of acyclic process (SC_ILLEGAL_PID in case of error)"#4370)
WS("    "#4435)STRING("sc_pid_t"#4439)WS(" "#4447)STRING("getPidP0"#4448)LP("("#4456)RP(")"#4457)WS(" "#4458)STRING("const"#4459)EOC(";"#4464)NL("\n"#4465)
------>NL("\n"#4466)
------>WS("    "#4467)-------->DOXY(" Get Process ID of acyclic process"#4474)
WS("    "#4509)-------->DOXY(" \retval ID of acyclic process (SC_ILLEGAL_PID in case of error)"#4516)
WS("    "#4581)STRING("sc_pid_t"#4585)WS(" "#4593)STRING("getPidP1"#4594)LP("("#4602)RP(")"#4603)WS(" "#4604)STRING("const"#4605)EOC(";"#4610)NL("\n"#4611)
------>NL("\n"#4612)
------>WS("    "#4613)-------->DOXY(" Get Process ID of acyclic process"#4620)
WS("    "#4655)-------->DOXY(" \retval ID of acyclic process (SC_ILLEGAL_PID in case of error)"#4662)
WS("    "#4727)STRING("sc_pid_t"#4731)WS(" "#4739)STRING("getPidP2"#4740)LP("("#4748)RP(")"#4749)WS(" "#4750)STRING("const"#4751)EOC(";"#4756)NL("\n"#4757)
------>NL("\n"#4758)
------>WS("    "#4759)-------->DOXY(" Get diagnosis handler for consumer registration"#4766)
WS("    "#4815)-------->DOXY(" \return reference to diagnosis handler sub-component"#4822)
WS("    "#4876)STRING("LibRteDiagnosis"#4880)AND("&"#4895)WS(" "#4896)STRING("getDiagnosisHandler"#4897)LP("("#4916)RP(")"#4917)EOC(";"#4918)NL("\n"#4919)
------>NL("\n"#4920)
------>WS("    "#4921)-------->DOXY(" Returns memory channel for RTE chip firmware update"#4928)
WS("    "#4981)-------->DOXY(" \return reference to firmware update channel"#4988)
WS("    "#5034)STRING("Interfaces"#5038)DOUBLEPOINT(":"#5048)DOUBLEPOINT(":"#5049)STRING("IMemory"#5050)AND("&"#5057)WS(" "#5058)STRING("getMemoryChannel"#5059)LP("("#5075)RP(")"#5076)EOC(";"#5077)NL("\n"#5078)
------>NL("\n"#5079)
------>WS("    "#5080)-------->DOXY(" Returns protocol layer access to RTE chip"#5087)
WS("    "#5130)-------->DOXY(" \return pointer to libRTE driver"#5137)
WS("    "#5171)STRING("rte_driver_t"#5175)MULTIPLY("*"#5187)WS(" "#5188)STRING("getBaseDriver"#5189)LP("("#5202)RP(")"#5203)EOC(";"#5204)NL("\n"#5205)
------>NL("\n"#5206)
------>WS("    "#5207)-------->DOXY(" Returns a reference to the nrt driver"#5214)
WS("    "#5253)STRING("LibRteNrtDriver"#5257)AND("&"#5272)WS(" "#5273)STRING("getNrtDriver"#5274)LP("("#5286)RP(")"#5287)EOC(";"#5288)NL("\n"#5289)
------>NL("\n"#5290)
------>WS("    "#5291)-------->DOXY(" cyclic method to update watchdog sub-component"#5298)
WS("    "#5346)STRING("void"#5350)WS(" "#5354)STRING("updateWatchdog"#5355)LP("("#5369)RP(")"#5370)EOC(";"#5371)NL("\n"#5372)
------>NL("\n"#5373)
------>WS("    "#5374)-------->DOXY(" cyclic method to check mailboxes for new messages"#5381)
WS("    "#5432)-------->DOXY(" note: if new messages are found here, the respective callback routines are executed"#5439)
WS("    "#5524)STRING("void"#5528)WS(" "#5532)STRING("updateAsync"#5533)LP("("#5544)RP(")"#5545)EOC(";"#5546)NL("\n"#5547)
------>NL("\n"#5548)
------>WS("    "#5549)-------->DOXY(" cyclic method to check device shutdown for power fail signaling to RTE controller"#5556)
WS("    "#5639)STRING("void"#5643)WS(" "#5647)STRING("checkDeviceShutdown"#5648)LP("("#5667)RP(")"#5668)EOC(";"#5669)NL("\n"#5670)
------>NL("\n"#5671)
------>WS("    "#5672)-------->DOXY(" Returns a reference to the Lib Rte Mailbox handler"#5679)
WS("    "#5731)STRING("LibRteMailboxManager"#5735)AND("&"#5755)WS(" "#5756)STRING("getMailboxManager"#5757)LP("("#5774)RP(")"#5775)EOC(";"#5776)NL("\n"#5777)
------>NL("\n"#5778)
------>WS("    "#5779)-------->DOXY(" Returns a reference to the Lib Rte Mailbox handler"#5786)
WS("    "#5838)STRING("LibRteProcessManager"#5842)AND("&"#5862)WS(" "#5863)STRING("getProcessManager"#5864)LP("("#5881)RP(")"#5882)EOC(";"#5883)NL("\n"#5884)
------>NL("\n"#5885)
------>WS("    "#5886)-------->DOXY(" \copydoc Interfaces::IEtherCatDriver"#5893)
WS("    "#5931)STRING("void"#5935)WS(" "#5939)STRING("newPDxData"#5940)LP("("#5950)STRING("void"#5951)WS(" "#5955)MULTIPLY("*"#5956)STRING("data"#5957)COMMA(","#5961)WS(" "#5962)STRING("size_t"#5963)WS(" "#5969)STRING("buf_size"#5970)RP(")"#5978)EOC(";"#5979)NL("\n"#5980)
------>NL("\n"#5981)
------>WS("    "#5982)-------->DOXY(" \copydoc Interfaces::IEtherCatDriver"#5989)
WS("    "#6027)STRING("Interfaces"#6031)DOUBLEPOINT(":"#6041)DOUBLEPOINT(":"#6042)STRING("PdState"#6043)WS(" "#6050)STRING("processPDxData"#6051)LP("("#6065)STRING("void"#6066)WS(" "#6070)MULTIPLY("*"#6071)STRING("buf"#6072)COMMA(","#6075)WS(" "#6076)STRING("size_t"#6077)WS(" "#6083)STRING("buf_size"#6084)RP(")"#6092)EOC(";"#6093)NL("\n"#6094)
------>NL("\n"#6095)
------>WS("    "#6096)-------->DOXY(" Returns the polling time of process p0."#6103)
WS("    "#6144)STRING("AINLINE"#6148)WS(" "#6155)STRING("UINT32"#6156)WS(" "#6162)STRING("getPollTimeP0"#6163)LP("("#6176)RP(")"#6177)NL("\n"#6178)
------>WS("    "#6179)-------->NL("\n"#6184)
-------->WS("        "#6185)STRING("auto"#6193)WS(" "#6197)STRING("updateCycle"#6198)WS(" "#6209)EQUALS("="#6210)WS(" "#6211)STRING("data_Get_updateCycle"#6212)LP("("#6232)RP(")"#6233)EOC(";"#6234)NL("\n"#6235)
-------->WS("        "#6236)STRING("UINT32"#6244)WS(" "#6250)STRING("pollTime"#6251)WS(" "#6259)EQUALS("="#6260)WS(" "#6261)STRING("static_cast"#6262)LESS("<"#6273)STRING("UINT32"#6274)MORE(">"#6280)LP("("#6281)STRING("updateCycle"#6282)WS(" "#6293)MULTIPLY("*"#6294)WS(" "#6295)NUMBER("1000"#6296)DOT("."#6300)NUMBER("0"#6301)STRING("f"#6302)RP(")"#6303)EOC(";"#6304)NL("\n"#6305)
-------->WS("        "#6306)STRING("return"#6314)WS(" "#6320)STRING("pollTime"#6321)EOC(";"#6329)NL("\n"#6330)
-------->WS("    "#6331)NL("\n"#6336)
------>NL("\n"#6337)
------>WS("    "#6338)-------->DOXY(" Raises an out of order read error"#6345)
WS("    "#6380)STRING("AINLINE"#6384)WS(" "#6391)STRING("void"#6392)WS(" "#6396)STRING("raiseOutOfOrderReadError"#6397)LP("("#6421)RP(")"#6422)NL("\n"#6423)
------>WS("    "#6424)-------->NL("\n"#6429)
-------->WS("        "#6430)STRING("this"#6438)MINUS("-"#6442)MORE(">"#6443)STRING("diag_Set_comModuleOutOfOrderRead"#6444)LP("("#6476)RP(")"#6477)EOC(";"#6478)NL("\n"#6479)
-------->WS("    "#6480)NL("\n"#6485)
------>NL("\n"#6486)
------>WS("    "#6487)-------->DOXY(" Raises an librte watchdog error"#6494)
WS("    "#6527)STRING("AINLINE"#6531)WS(" "#6538)STRING("void"#6539)WS(" "#6543)STRING("raiseWatchdogError"#6544)LP("("#6562)RP(")"#6563)NL("\n"#6564)
------>WS("    "#6565)-------->NL("\n"#6570)
-------->WS("        "#6571)STRING("if"#6579)WS(" "#6581)LP("("#6582)LP("("#6583)NOT("!"#6584)STRING("this"#6585)MINUS("-"#6589)MORE(">"#6590)STRING("softResetInterface"#6591)MINUS("-"#6609)MORE(">"#6610)STRING("isSoftResetRequested"#6611)LP("("#6631)RP(")"#6632)RP(")"#6633)WS(" "#6634)AND("&"#6635)AND("&"#6636)WS(" "#6637)LP("("#6638)NOT("!"#6639)STRING("this"#6640)MINUS("-"#6644)MORE(">"#6645)STRING("shutdownInterface"#6646)MINUS("-"#6663)MORE(">"#6664)STRING("isShutdownActive"#6665)LP("("#6681)RP(")"#6682)RP(")"#6683)RP(")"#6684)NL("\n"#6685)
-------->WS("        "#6686)---------->NL("\n"#6695)
---------->WS("            "#6696)------------>COMM(" avoid watchdogError on soft reset"#6710)
WS("            "#6745)------------>COMM(" todo: is watchdogError really necessary if system is beeing shutdown?"#6759)
WS("            "#6830)STRING("this"#6842)MINUS("-"#6846)MORE(">"#6847)STRING("diag_Set_comModuleWatchdogError"#6848)LP("("#6879)STRING("true"#6880)RP(")"#6884)EOC(";"#6885)NL("\n"#6886)
---------->WS("        "#6887)NL("\n"#6896)
-------->WS("    "#6897)NL("\n"#6902)
------>NL("\n"#6903)
------>WS("    "#6904)-------->DOXY(" Raises a fieldbus timeout error when mailbox can not be used"#6911)
WS("    "#6973)STRING("AINLINE"#6977)WS(" "#6984)STRING("void"#6985)WS(" "#6989)STRING("raiseComModuleMailboxTimeoutError"#6990)LP("("#7023)STRING("UINT32"#7024)WS(" "#7030)STRING("errorId"#7031)RP(")"#7038)NL("\n"#7039)
------>WS("    "#7040)-------->NL("\n"#7045)
-------->WS("        "#7046)STRING("this"#7054)MINUS("-"#7058)MORE(">"#7059)STRING("diag_Set_comModuleMailboxTimeoutError"#7060)LP("("#7097)STRING("errorId"#7098)RP(")"#7105)EOC(";"#7106)NL("\n"#7107)
-------->WS("    "#7108)NL("\n"#7113)
------>NL("\n"#7114)
------>WS("    "#7115)-------->DOXY(" Raises a fieldbus internal communication error"#7122)
WS("    "#7170)STRING("AINLINE"#7174)WS(" "#7181)STRING("void"#7182)WS(" "#7186)STRING("raiseComModuleInternalCommunicationError"#7187)LP("("#7227)STRING("UINT32"#7228)WS(" "#7234)STRING("processId"#7235)COMMA(","#7244)WS(" "#7245)STRING("UINT32"#7246)WS(" "#7252)STRING("returnCode"#7253)RP(")"#7263)NL("\n"#7264)
------>WS("    "#7265)-------->NL("\n"#7270)
-------->WS("        "#7271)STRING("this"#7279)MINUS("-"#7283)MORE(">"#7284)STRING("diag_Set_comModuleInternalCommunicationError"#7285)LP("("#7329)STRING("processId"#7330)COMMA(","#7339)WS(" "#7340)STRING("returnCode"#7341)RP(")"#7351)EOC(";"#7352)NL("\n"#7353)
-------->WS("    "#7354)NL("\n"#7359)
------>NL("\n"#7360)
------>WS("    "#7361)-------->COMM(" ****************************************************************************"#7367)
WS("    "#7445)-------->COMM(" IRQ related stuff"#7451)
WS("    "#7470)-------->COMM(" ****************************************************************************"#7476)
WS("    "#7554)-------->DOXY(" Set state of process data irq"#7561)
WS("    "#7592)-------->DOXY(" \param state  set/reset irq line"#7599)
WS("    "#7633)STRING("void"#7637)WS(" "#7641)STRING("pdIrqSetState"#7642)LP("("#7655)STRING("bool"#7656)WS(" "#7660)STRING("state"#7661)RP(")"#7666)EOC(";"#7667)NL("\n"#7668)
------>NL("\n"#7669)
------>WS("    "#7670)-------->DOXY(" Set state of mailbox irq"#7677)
WS("    "#7703)-------->DOXY(" \param state  set/reset irq line"#7710)
WS("    "#7744)STRING("void"#7748)WS(" "#7752)STRING("mbxIrqSetState"#7753)LP("("#7767)STRING("bool"#7768)WS(" "#7772)STRING("state"#7773)RP(")"#7778)EOC(";"#7779)NL("\n"#7780)
------>NL("\n"#7781)
------>WS("    "#7782)-------->COMM(" ****************************************************************************"#7788)
WS("    "#7866)-------->COMM(" CANOpen over EtherCat specific methods (COE)"#7872)
WS("    "#7918)-------->COMM(" All methods here are included in the IEtherCatDriver interface"#7924)
WS("    "#7988)-------->COMM(" ****************************************************************************"#7994)
NL("\n"#8072)
------>WS("    "#8073)-------->DOXY(" see Interfaces::ILibRteDriver"#8080)
WS("    "#8111)-------->DOXY(" Additional notes: Can be called from every process except LibRteDriver."#8118)
WS("    "#8191)STRING("void"#8195)WS(" "#8199)STRING("sendCoeServiceDataReadRequest"#8200)LP("("#8229)STRING("UINT32"#8230)WS(" "#8236)STRING("index"#8237)COMMA(","#8242)WS(" "#8243)STRING("UINT32"#8244)WS(" "#8250)STRING("subIndex"#8251)COMMA(","#8259)WS(" "#8260)STRING("UINT32"#8261)WS(" "#8267)STRING("dataSize"#8268)COMMA(","#8276)WS(" "#8277)STRING("bool"#8278)WS(" "#8282)STRING("completeAccess"#8283)RP(")"#8297)EOC(";"#8298)NL("\n"#8299)
------>NL("\n"#8300)
------>WS("    "#8301)-------->DOXY(" Registers a handler for service data processing."#8308)
WS("    "#8358)-------->DOXY(" Attention: Only one handler can be registered. If you register more than one the last one registered will be called"#8365)
WS("    "#8482)-------->DOXY(" \param serviceDataHandler A reference to the handler"#8489)
WS("    "#8543)STRING("void"#8547)WS(" "#8551)STRING("registerCoeServiceDataHandler"#8552)LP("("#8581)STRING("Interfaces"#8582)DOUBLEPOINT(":"#8592)DOUBLEPOINT(":"#8593)STRING("ICoeServiceDataHandler"#8594)AND("&"#8616)WS(" "#8617)STRING("serviceDataHandler"#8618)RP(")"#8636)EOC(";"#8637)NL("\n"#8638)
------>NL("\n"#8639)
------>WS("    "#8640)-------->DOXY(" Registers a handler for foe data processing."#8647)
WS("    "#8693)-------->DOXY(" \param foeHandler A reference to the handler"#8700)
WS("    "#8746)STRING("void"#8750)WS(" "#8754)STRING("registerFoeServiceDataHandler"#8755)LP("("#8784)STRING("Interfaces"#8785)DOUBLEPOINT(":"#8795)DOUBLEPOINT(":"#8796)STRING("IFoeHandler"#8797)AND("&"#8808)WS(" "#8809)STRING("foeHandler"#8810)RP(")"#8820)EOC(";"#8821)NL("\n"#8822)
------>NL("\n"#8823)
------>WS("    "#8824)-------->DOXY(" Registers a handler for process data configuration requests."#8831)
WS("    "#8893)-------->DOXY(" \param pdConfigHandler  interface to component handling process data configuration requests"#8900)
WS("    "#8993)STRING("void"#8997)WS(" "#9001)STRING("registerProcessDataConfigurationHandler"#9002)LP("("#9041)STRING("Interfaces"#9042)DOUBLEPOINT(":"#9052)DOUBLEPOINT(":"#9053)STRING("IProcessDataConfigurationHandler"#9054)AND("&"#9086)WS(" "#9087)STRING("pdConfigHandler"#9088)RP(")"#9103)EOC(";"#9104)NL("\n"#9105)
------>NL("\n"#9106)
------>WS("    "#9107)-------->COMM(" ****************************************************************************"#9113)
WS("    "#9191)-------->COMM(" Methods used for driver statistic output"#9197)
WS("    "#9239)-------->COMM(" ****************************************************************************"#9245)
WS("    "#9323)-------->DOXY(" Increments p0 process counter"#9330)
WS("    "#9361)STRING("AINLINE"#9365)WS(" "#9372)STRING("void"#9373)WS(" "#9377)STRING("incrementStats_cyclesP0"#9378)LP("("#9401)RP(")"#9402)NL("\n"#9403)
------>WS("    "#9404)-------->NL("\n"#9409)
-------->WS("        "#9410)STRING("data_Set_stats_cyclesP0"#9418)LP("("#9441)STRING("data_Get_stats_cyclesP0"#9442)LP("("#9465)RP(")"#9466)WS(" "#9467)PLUS("+"#9468)WS(" "#9469)NUMBER("1"#9470)RP(")"#9471)EOC(";"#9472)NL("\n"#9473)
-------->WS("    "#9474)NL("\n"#9479)
------>NL("\n"#9480)
------>WS("    "#9481)-------->DOXY(" Increments p1 process counter"#9488)
WS("    "#9519)STRING("AINLINE"#9523)WS(" "#9530)STRING("void"#9531)WS(" "#9535)STRING("incrementStats_cyclesP1"#9536)LP("("#9559)RP(")"#9560)NL("\n"#9561)
------>WS("    "#9562)-------->NL("\n"#9567)
-------->WS("        "#9568)STRING("data_Set_stats_cyclesP1"#9576)LP("("#9599)STRING("data_Get_stats_cyclesP1"#9600)LP("("#9623)RP(")"#9624)WS(" "#9625)PLUS("+"#9626)WS(" "#9627)NUMBER("1"#9628)RP(")"#9629)EOC(";"#9630)NL("\n"#9631)
-------->WS("    "#9632)NL("\n"#9637)
------>NL("\n"#9638)
------>WS("    "#9639)-------->DOXY(" Increments p2 process counter"#9646)
WS("    "#9677)STRING("AINLINE"#9681)WS(" "#9688)STRING("void"#9689)WS(" "#9693)STRING("incrementStats_cyclesP2"#9694)LP("("#9717)RP(")"#9718)NL("\n"#9719)
------>WS("    "#9720)-------->NL("\n"#9725)
-------->WS("        "#9726)STRING("data_Set_stats_cyclesP2"#9734)LP("("#9757)STRING("data_Get_stats_cyclesP2"#9758)LP("("#9781)RP(")"#9782)WS(" "#9783)PLUS("+"#9784)WS(" "#9785)NUMBER("1"#9786)RP(")"#9787)EOC(";"#9788)NL("\n"#9789)
-------->WS("    "#9790)NL("\n"#9795)
------>NL("\n"#9796)
------>WS("    "#9797)-------->DOXY(" Increments the process esm ack counter"#9804)
WS("    "#9844)STRING("AINLINE"#9848)WS(" "#9855)STRING("void"#9856)WS(" "#9860)STRING("incrementStats_processSendEsmAck"#9861)LP("("#9893)RP(")"#9894)NL("\n"#9895)
------>WS("    "#9896)-------->NL("\n"#9901)
-------->WS("        "#9902)STRING("data_Set_stats_processSendEsmAck"#9910)LP("("#9942)STRING("data_Get_stats_processSendEsmAck"#9943)LP("("#9975)RP(")"#9976)WS(" "#9977)PLUS("+"#9978)WS(" "#9979)NUMBER("1"#9980)RP(")"#9981)EOC(";"#9982)NL("\n"#9983)
-------->WS("    "#9984)NL("\n"#9989)
------>NL("\n"#9990)
------>WS("    "#9991)-------->DOXY(" Increments the the process sdo request counter"#9998)
WS("    "#10046)STRING("AINLINE"#10050)WS(" "#10057)STRING("void"#10058)WS(" "#10062)STRING("incrementStats_processSendSdoReadRequest"#10063)LP("("#10103)RP(")"#10104)NL("\n"#10105)
------>WS("    "#10106)-------->NL("\n"#10111)
-------->WS("        "#10112)STRING("data_Set_stats_processSendSdoReadRequest"#10120)LP("("#10160)STRING("data_Get_stats_processSendSdoReadRequest"#10161)LP("("#10201)RP(")"#10202)WS(" "#10203)PLUS("+"#10204)WS(" "#10205)NUMBER("1"#10206)RP(")"#10207)EOC(";"#10208)NL("\n"#10209)
-------->WS("    "#10210)NL("\n"#10215)
------>NL("\n"#10216)
------>WS("    "#10217)-------->DOXY(" Increments the process send diagnosis message counter"#10224)
WS("    "#10279)STRING("AINLINE"#10283)WS(" "#10290)STRING("void"#10291)WS(" "#10295)STRING("incrementStats_processSendDiagnosisMessage"#10296)LP("("#10338)RP(")"#10339)NL("\n"#10340)
------>WS("    "#10341)-------->NL("\n"#10346)
-------->WS("        "#10347)STRING("data_Set_stats_processSendDiagnosisMessage"#10355)LP("("#10397)STRING("data_Get_stats_processSendDiagnosisMessage"#10398)LP("("#10440)RP(")"#10441)WS(" "#10442)PLUS("+"#10443)WS(" "#10444)NUMBER("1"#10445)RP(")"#10446)EOC(";"#10447)NL("\n"#10448)
-------->WS("    "#10449)NL("\n"#10454)
------>NL("\n"#10455)
------>WS("    "#10456)-------->DOXY(" Increments the process receive module config request counter"#10463)
WS("    "#10525)STRING("AINLINE"#10529)WS(" "#10536)STRING("void"#10537)WS(" "#10541)STRING("incrementStats_processModuleConfigRequest"#10542)LP("("#10583)RP(")"#10584)NL("\n"#10585)
------>WS("    "#10586)-------->NL("\n"#10591)
-------->WS("        "#10592)STRING("data_Set_stats_processModuleConfigRequest"#10600)LP("("#10641)STRING("data_Get_stats_processModuleConfigRequest"#10642)LP("("#10683)RP(")"#10684)WS(" "#10685)PLUS("+"#10686)WS(" "#10687)NUMBER("1"#10688)RP(")"#10689)EOC(";"#10690)NL("\n"#10691)
-------->WS("    "#10692)NL("\n"#10697)
------>NL("\n"#10698)
------>WS("    "#10699)-------->DOXY(" Increments the process receive esm request counter"#10706)
WS("    "#10758)STRING("AINLINE"#10762)WS(" "#10769)STRING("void"#10770)WS(" "#10774)STRING("incrementStats_processEsmRequest"#10775)LP("("#10807)RP(")"#10808)NL("\n"#10809)
------>WS("    "#10810)-------->NL("\n"#10815)
-------->WS("        "#10816)STRING("data_Set_stats_processEsmRequest"#10824)LP("("#10856)STRING("data_Get_stats_processEsmRequest"#10857)LP("("#10889)RP(")"#10890)WS(" "#10891)PLUS("+"#10892)WS(" "#10893)NUMBER("1"#10894)RP(")"#10895)EOC(";"#10896)NL("\n"#10897)
-------->WS("    "#10898)NL("\n"#10903)
------>NL("\n"#10904)
------>WS("    "#10905)-------->DOXY(" Increments the as read response frame received counter"#10912)
WS("    "#10968)STRING("AINLINE"#10972)WS(" "#10979)STRING("void"#10980)WS(" "#10984)STRING("incrementStats_frameAsReadResponse"#10985)LP("("#11019)RP(")"#11020)NL("\n"#11021)
------>WS("    "#11022)-------->NL("\n"#11027)
-------->WS("        "#11028)STRING("data_Set_stats_frameAsReadResponse"#11036)LP("("#11070)STRING("data_Get_stats_frameAsReadResponse"#11071)LP("("#11105)RP(")"#11106)WS(" "#11107)PLUS("+"#11108)WS(" "#11109)NUMBER("1"#11110)RP(")"#11111)EOC(";"#11112)NL("\n"#11113)
-------->WS("    "#11114)NL("\n"#11119)
------>NL("\n"#11120)
------>WS("    "#11121)-------->DOXY(" Increments the read frame received counter"#11128)
WS("    "#11172)STRING("AINLINE"#11176)WS(" "#11183)STRING("void"#11184)WS(" "#11188)STRING("incrementStats_frameAsRead"#11189)LP("("#11215)RP(")"#11216)NL("\n"#11217)
------>WS("    "#11218)-------->NL("\n"#11223)
-------->WS("        "#11224)STRING("data_Set_stats_frameAsRead"#11232)LP("("#11258)STRING("data_Get_stats_frameAsRead"#11259)LP("("#11285)RP(")"#11286)WS(" "#11287)PLUS("+"#11288)WS(" "#11289)NUMBER("1"#11290)RP(")"#11291)EOC(";"#11292)NL("\n"#11293)
-------->WS("    "#11294)NL("\n"#11299)
------>NL("\n"#11300)
------>WS("    "#11301)-------->DOXY(" Increments the as write frame received counter"#11308)
WS("    "#11356)STRING("AINLINE"#11360)WS(" "#11367)STRING("void"#11368)WS(" "#11372)STRING("incrementStats_frameAsWrite"#11373)LP("("#11400)RP(")"#11401)NL("\n"#11402)
------>WS("    "#11403)-------->NL("\n"#11408)
-------->WS("        "#11409)STRING("data_Set_stats_frameAsWrite"#11417)LP("("#11444)STRING("data_Get_stats_frameAsWrite"#11445)LP("("#11472)RP(")"#11473)WS(" "#11474)PLUS("+"#11475)WS(" "#11476)NUMBER("1"#11477)RP(")"#11478)EOC(";"#11479)NL("\n"#11480)
-------->WS("    "#11481)NL("\n"#11486)
------>NL("\n"#11487)
------>WS("    "#11488)-------->DOXY(" Increments the esm state change frame received counter"#11495)
WS("    "#11551)STRING("AINLINE"#11555)WS(" "#11562)STRING("void"#11563)WS(" "#11567)STRING("incrementStats_frameEsmStateChange"#11568)LP("("#11602)RP(")"#11603)NL("\n"#11604)
------>WS("    "#11605)-------->NL("\n"#11610)
-------->WS("        "#11611)STRING("data_Set_stats_frameEsmStateChange"#11619)LP("("#11653)STRING("data_Get_stats_frameEsmStateChange"#11654)LP("("#11688)RP(")"#11689)WS(" "#11690)PLUS("+"#11691)WS(" "#11692)NUMBER("1"#11693)RP(")"#11694)EOC(";"#11695)NL("\n"#11696)
-------->WS("    "#11697)NL("\n"#11702)
------>NL("\n"#11703)
------>WS("    "#11704)-------->DOXY(" Increments the module config frame received counter"#11711)
WS("    "#11764)STRING("AINLINE"#11768)WS(" "#11775)STRING("void"#11776)WS(" "#11780)STRING("incrementStats_frameModuleConfig"#11781)LP("("#11813)RP(")"#11814)NL("\n"#11815)
------>WS("    "#11816)-------->NL("\n"#11821)
-------->WS("        "#11822)STRING("data_Set_stats_frameModuleConfig"#11830)LP("("#11862)STRING("data_Get_stats_frameModuleConfig"#11863)LP("("#11895)RP(")"#11896)WS(" "#11897)PLUS("+"#11898)WS(" "#11899)NUMBER("1"#11900)RP(")"#11901)EOC(";"#11902)NL("\n"#11903)
-------->WS("    "#11904)NL("\n"#11909)
------>NL("\n"#11910)
------>NL("\n"#11911)
------>WS("    "#11912)STRING("virtual"#11916)WS(" "#11923)STRING("FMCReturnCode"#11924)WS(" "#11937)STRING("updateProfinetModuleConfiguration"#11938)LP("("#11971)RP(")"#11972)EOC(";"#11973)NL("\n"#11974)
------>NL("\n"#11975)
------>WS("    "#11976)-------->DOXY(" returns true when sendDeviceInformations() has been finished"#11983)
WS("    "#12045)STRING("BOOL"#12049)WS(" "#12053)STRING("isSendDeviceInformationDone"#12054)LP("("#12081)RP(")"#12082)NL("\n"#12083)
------>WS("    "#12084)-------->NL("\n"#12089)
-------->WS("        "#12090)STRING("return"#12098)WS(" "#12104)STRING("static_cast"#12105)LESS("<"#12116)STRING("BOOL"#12117)MORE(">"#12121)LP("("#12122)STRING("sendDeviceInformationDone"#12123)RP(")"#12148)EOC(";"#12149)NL("\n"#12150)
-------->WS("    "#12151)NL("\n"#12156)
------>NL("\n"#12157)
------>NL("\n"#12158)
------>STRING("private"#12159)DOUBLEPOINT(":"#12166)NL("\n"#12167)
------>NL("\n"#12168)
------>WS("    "#12169)-------->DOXY(" Sends ethercat device information to the librte."#12176)
WS("    "#12226)-------->DOXY(" \param explDevId Explicit device id"#12233)
WS("    "#12270)STRING("FMCReturnCode"#12274)WS(" "#12287)STRING("sendEtherCatDeviceIdentification"#12288)LP("("#12320)STRING("UINT16"#12321)WS(" "#12327)STRING("explDevId"#12328)RP(")"#12337)EOC(";"#12338)NL("\n"#12339)
------>NL("\n"#12340)
------>WS("    "#12341)-------->DOXY(" Sends profinet device information to the librte."#12348)
WS("    "#12398)-------->DOXY(" \param macAddress The to be used mac address of the profinet device"#12405)
WS("    "#12474)-------->DOXY(" \param deviceTypeName The device type name of the profinet device"#12481)
WS("    "#12548)-------->DOXY(" \param deviceId The device id of the profinet device"#12555)
WS("    "#12609)-------->DOXY(" \param dapModuleId The dap module id of the profinet device"#12616)
WS("    "#12677)STRING("FMCReturnCode"#12681)WS(" "#12694)STRING("sendProfiNetDeviceIdentification"#12695)LP("("#12727)NL("\n"#12728)
------>WS("        "#12729)STRING("Interfaces"#12737)DOUBLEPOINT(":"#12747)DOUBLEPOINT(":"#12748)STRING("IDeviceIdentification"#12749)AND("&"#12770)WS(" "#12771)STRING("deviceIdent"#12772)NL("\n"#12783)
------>WS("    "#12784)RP(")"#12788)EOC(";"#12789)NL("\n"#12790)
------>NL("\n"#12791)
------>WS("    "#12792)-------->DOXY(" is true when sendDeviceInformations() has been finished"#12799)
WS("    "#12856)STRING("std"#12860)DOUBLEPOINT(":"#12863)DOUBLEPOINT(":"#12864)STRING("atomic"#12865)LESS("<"#12871)STRING("BOOL"#12872)MORE(">"#12876)WS(" "#12877)STRING("sendDeviceInformationDone"#12878)EOC(";"#12903)NL("\n"#12904)
------>NL("\n"#12905)
------>WS("    "#12906)-------->DOXY(" Generic driver structure for data exchange with libRTE"#12913)
WS("    "#12969)STRING("rte_driver_t"#12973)WS(" "#12985)STRING("appDriver"#12986)EOC(";"#12995)NL("\n"#12996)
------>NL("\n"#12997)
------>WS("    "#12998)STRING("LibRteNrtDriver"#13002)WS(" "#13017)STRING("nrtDriver"#13018)EOC(";"#13027)NL("\n"#13028)
------>NL("\n"#13029)
------>WS("    "#13030)STRING("LibRteMailboxManager"#13034)WS(" "#13054)STRING("mailboxManager"#13055)EOC(";"#13069)NL("\n"#13070)
------>NL("\n"#13071)
------>WS("    "#13072)-------->DOXY(" holds sub-component for firmware updates"#13079)
WS("    "#13121)STRING("LibRteFirmwareUpdateChannel"#13125)WS(" "#13152)STRING("firmwareUpdateChannel"#13153)EOC(";"#13174)NL("\n"#13175)
------>NL("\n"#13176)
------>WS("    "#13177)-------->DOXY(" holds sub-component for device description file"#13184)
WS("    "#13233)STRING("LibRteDeviceDescription"#13237)WS(" "#13260)STRING("deviceDescription"#13261)EOC(";"#13278)NL("\n"#13279)
------>NL("\n"#13280)
------>WS("    "#13281)-------->DOXY(" holds a reference to a sub-component used for module configuration"#13288)
WS("    "#13356)STRING("LibRteModuleConfig"#13360)MULTIPLY("*"#13378)WS(" "#13379)STRING("moduleConfig"#13380)EOC(";"#13392)NL("\n"#13393)
------>NL("\n"#13394)
------>WS("    "#13395)-------->DOXY(" holds sub-component for libRTE diagnosis"#13402)
WS("    "#13444)STRING("LibRteDiagnosis"#13448)WS(" "#13463)STRING("diagnosis"#13464)EOC(";"#13473)NL("\n"#13474)
------>NL("\n"#13475)
------>WS("    "#13476)-------->DOXY(" holds sub-component for watchdog handling"#13483)
WS("    "#13526)STRING("LibRteWatchdog"#13530)WS(" "#13544)STRING("watchdog"#13545)EOC(";"#13553)NL("\n"#13554)
------>NL("\n"#13555)
------>WS("    "#13556)-------->DOXY(" holds channel to process data irq"#13563)
WS("    "#13598)STRING("Interfaces"#13602)DOUBLEPOINT(":"#13612)DOUBLEPOINT(":"#13613)STRING("IPhysicalGpioChannel"#13614)MULTIPLY("*"#13634)WS(" "#13635)STRING("pdIrq"#13636)EOC(";"#13641)NL("\n"#13642)
------>NL("\n"#13643)
------>WS("    "#13644)-------->DOXY(" holds channel to mailbox irq"#13651)
WS("    "#13681)STRING("Interfaces"#13685)DOUBLEPOINT(":"#13695)DOUBLEPOINT(":"#13696)STRING("IPhysicalGpioChannel"#13697)MULTIPLY("*"#13717)WS(" "#13718)STRING("mbxIrq"#13719)EOC(";"#13725)NL("\n"#13726)
------>NL("\n"#13727)
------>WS("    "#13728)-------->DOXY(" holds channel to reset the rte chip"#13735)
WS("    "#13772)STRING("Interfaces"#13776)DOUBLEPOINT(":"#13786)DOUBLEPOINT(":"#13787)STRING("IPhysicalGpioChannel"#13788)MULTIPLY("*"#13808)WS(" "#13809)STRING("chipReset"#13810)EOC(";"#13819)NL("\n"#13820)
------>NL("\n"#13821)
------>WS("    "#13822)-------->DOXY(" holds channel to reset the rte chip"#13829)
WS("    "#13866)STRING("Interfaces"#13870)DOUBLEPOINT(":"#13880)DOUBLEPOINT(":"#13881)STRING("IPhysicalGpioChannel"#13882)MULTIPLY("*"#13902)WS(" "#13903)STRING("powerFailRTE"#13904)EOC(";"#13916)NL("\n"#13917)
------>NL("\n"#13918)
------>WS("    "#13919)-------->DOXY(" Holds interface to shutdown"#13926)
WS("    "#13955)STRING("Interfaces"#13959)DOUBLEPOINT(":"#13969)DOUBLEPOINT(":"#13970)STRING("IDeviceShutdown"#13971)MULTIPLY("*"#13986)WS(" "#13987)STRING("shutdownInterface"#13988)EOC(";"#14005)NL("\n"#14006)
------>NL("\n"#14007)
------>WS("    "#14008)-------->DOXY(" Holds interface to softReset"#14015)
WS("    "#14045)STRING("Interfaces"#14049)DOUBLEPOINT(":"#14059)DOUBLEPOINT(":"#14060)STRING("ISoftReset"#14061)MULTIPLY("*"#14071)WS(" "#14072)STRING("softResetInterface"#14073)EOC(";"#14091)NL("\n"#14092)
------>NL("\n"#14093)
------>WS("    "#14094)-------->DOXY(" Holds interface to communicationInformation (protocol type, hardware type)"#14101)
WS("    "#14177)STRING("Interfaces"#14181)DOUBLEPOINT(":"#14191)DOUBLEPOINT(":"#14192)STRING("ICommunicationInformation"#14193)MULTIPLY("*"#14218)WS(" "#14219)STRING("communicationInformation"#14220)EOC(";"#14244)NL("\n"#14245)
------>NL("\n"#14246)
------>WS("    "#14247)-------->DOXY(" Holds interface to hardwareInformation"#14254)
WS("    "#14294)STRING("Interfaces"#14298)DOUBLEPOINT(":"#14308)DOUBLEPOINT(":"#14309)STRING("IHardwareInformation"#14310)MULTIPLY("*"#14330)WS(" "#14331)STRING("hardwareInformation"#14332)EOC(";"#14351)NL("\n"#14352)
------>NL("\n"#14353)
------>WS("    "#14354)-------->DOXY(" Holds interface to firmwareVersionInformation"#14361)
WS("    "#14408)STRING("Interfaces"#14412)DOUBLEPOINT(":"#14422)DOUBLEPOINT(":"#14423)STRING("IFirmwareVersionInformation"#14424)MULTIPLY("*"#14451)WS(" "#14452)STRING("firmwareVersionInformation"#14453)EOC(";"#14479)NL("\n"#14480)
------>NL("\n"#14481)
------>WS("    "#14482)-------->DOXY(" Holds the currently active protocol type"#14489)
WS("    "#14531)STRING("Autogen"#14535)DOUBLEPOINT(":"#14542)DOUBLEPOINT(":"#14543)STRING("ComProtocolType"#14544)WS(" "#14559)STRING("comProtocolType"#14560)EOC(";"#14575)NL("\n"#14576)
------>NL("\n"#14577)
------>WS("    "#14578)-------->DOXY(" The lib rte process Manager. This class handles the registration to the librte process p0, p1, p2"#14585)
WS("    "#14684)STRING("LibRteProcessManager"#14688)WS(" "#14708)STRING("processManager"#14709)EOC(";"#14723)NL("\n"#14724)
------>NL("\n"#14725)
------>WS("    "#14726)-------->DOXY(" Abstract fieldbus process handler"#14733)
WS("    "#14768)STRING("LibRteProcessHandler"#14772)MULTIPLY("*"#14792)WS(" "#14793)STRING("processP0Handler"#14794)EOC(";"#14810)NL("\n"#14811)
------>NL("\n"#14812)
------>WS("    "#14813)-------->DOXY(" Abstract fieldbus process handler"#14820)
WS("    "#14855)STRING("LibRteProcessHandler"#14859)MULTIPLY("*"#14879)WS(" "#14880)STRING("processP1Handler"#14881)EOC(";"#14897)NL("\n"#14898)
------>NL("\n"#14899)
------>WS("    "#14900)-------->DOXY(" Abstract fieldbus process handler"#14907)
WS("    "#14942)STRING("LibRteProcessHandler"#14946)MULTIPLY("*"#14966)WS(" "#14967)STRING("processP2Handler"#14968)EOC(";"#14984)NL("\n"#14985)
------>NL("\n"#14986)
---->EOC(";"#14988)NL("\n"#14989)
-->NL("\n"#14991)
NL("\n"#14993)
