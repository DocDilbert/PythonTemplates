doxygencomment(" \file MotorControl.h"#3)
doxygencomment(" \copyright Festo AG & Co. KG, Esslingen. All rights reserved."#28)
doxygencomment(" \author CGG (Owner)"#94)
doxygencomment(" \brief Definition of a class that manages different control types e.g. cascade, state control"#118)
doxygencomment(" for applicative values - position, velocity, torque and current."#216)
NL("\n"#282)
HASH("#"#283)STRING("pragma"#284)WS(" "#290)STRING("once"#291)NL("\n"#295)
NL("\n"#296)
HASH("#"#297)STRING("include"#298)WS(" "#305)QUOTE("""#306)STRING("AbstractController"#307)DOT("."#325)STRING("h"#326)QUOTE("""#327)NL("\n"#328)
HASH("#"#329)STRING("include"#330)WS(" "#337)QUOTE("""#338)STRING("ActualValuesData"#339)DOT("."#355)STRING("h"#356)QUOTE("""#357)NL("\n"#358)
HASH("#"#359)STRING("include"#360)WS(" "#367)QUOTE("""#368)STRING("AngleAlterationRateLimiter"#369)DOT("."#395)STRING("h"#396)QUOTE("""#397)NL("\n"#398)
HASH("#"#399)STRING("include"#400)WS(" "#407)QUOTE("""#408)STRING("CascadeControl"#409)DOT("."#423)STRING("h"#424)QUOTE("""#425)NL("\n"#426)
HASH("#"#427)STRING("include"#428)WS(" "#435)QUOTE("""#436)STRING("ComponentBaseMoc"#437)DOT("."#453)STRING("h"#454)QUOTE("""#455)NL("\n"#456)
HASH("#"#457)STRING("include"#458)WS(" "#465)QUOTE("""#466)STRING("ComponentCommon"#467)DOT("."#482)STRING("h"#483)QUOTE("""#484)NL("\n"#485)
HASH("#"#486)STRING("include"#487)WS(" "#494)QUOTE("""#495)STRING("DelayedInput"#496)DOT("."#508)STRING("h"#509)QUOTE("""#510)NL("\n"#511)
HASH("#"#512)STRING("include"#513)WS(" "#520)QUOTE("""#521)STRING("EncoderlessController"#522)DOT("."#543)STRING("h"#544)QUOTE("""#545)NL("\n"#546)
HASH("#"#547)STRING("include"#548)WS(" "#555)QUOTE("""#556)STRING("FMCReturnCodes"#557)DOT("."#571)STRING("h"#572)QUOTE("""#573)NL("\n"#574)
HASH("#"#575)STRING("include"#576)WS(" "#583)QUOTE("""#584)STRING("FMCTypes"#585)DOT("."#593)STRING("h"#594)QUOTE("""#595)NL("\n"#596)
HASH("#"#597)STRING("include"#598)WS(" "#605)QUOTE("""#606)STRING("FilterNotch"#607)DOT("."#618)STRING("h"#619)QUOTE("""#620)NL("\n"#621)
HASH("#"#622)STRING("include"#623)WS(" "#630)QUOTE("""#631)STRING("IActualValues"#632)DOT("."#645)STRING("h"#646)QUOTE("""#647)NL("\n"#648)
HASH("#"#649)STRING("include"#650)WS(" "#657)QUOTE("""#658)STRING("ICommutationSignal"#659)DOT("."#677)STRING("h"#678)QUOTE("""#679)NL("\n"#680)
HASH("#"#681)STRING("include"#682)WS(" "#689)QUOTE("""#690)STRING("IComponentDirectory"#691)DOT("."#710)STRING("h"#711)QUOTE("""#712)NL("\n"#713)
HASH("#"#714)STRING("include"#715)WS(" "#722)QUOTE("""#723)STRING("IControlLimits"#724)DOT("."#738)STRING("h"#739)QUOTE("""#740)NL("\n"#741)
HASH("#"#742)STRING("include"#743)WS(" "#750)QUOTE("""#751)STRING("IControlParameterAccess"#752)DOT("."#775)STRING("h"#776)QUOTE("""#777)NL("\n"#778)
HASH("#"#779)STRING("include"#780)WS(" "#787)QUOTE("""#788)STRING("ICurrentSignal"#789)DOT("."#803)STRING("h"#804)QUOTE("""#805)NL("\n"#806)
HASH("#"#807)STRING("include"#808)WS(" "#815)QUOTE("""#816)STRING("IDiagnosisTriggerInterface"#817)DOT("."#843)STRING("h"#844)QUOTE("""#845)NL("\n"#846)
HASH("#"#847)STRING("include"#848)WS(" "#855)QUOTE("""#856)STRING("IEncoderlessControl"#857)DOT("."#876)STRING("h"#877)QUOTE("""#878)NL("\n"#879)
HASH("#"#880)STRING("include"#881)WS(" "#888)QUOTE("""#889)STRING("IIpsSetpointOwner"#890)DOT("."#907)STRING("h"#908)QUOTE("""#909)NL("\n"#910)
HASH("#"#911)STRING("include"#912)WS(" "#919)QUOTE("""#920)STRING("ILimitation"#921)DOT("."#932)STRING("h"#933)QUOTE("""#934)NL("\n"#935)
HASH("#"#936)STRING("include"#937)WS(" "#944)QUOTE("""#945)STRING("IMocSetpointOwner"#946)DOT("."#963)STRING("h"#964)QUOTE("""#965)NL("\n"#966)
HASH("#"#967)STRING("include"#968)WS(" "#975)QUOTE("""#976)STRING("IMotorControl"#977)DOT("."#990)STRING("h"#991)QUOTE("""#992)NL("\n"#993)
HASH("#"#994)STRING("include"#995)WS(" "#1002)QUOTE("""#1003)STRING("IReinitComponent"#1004)DOT("."#1020)STRING("h"#1021)QUOTE("""#1022)NL("\n"#1023)
HASH("#"#1024)STRING("include"#1025)WS(" "#1032)QUOTE("""#1033)STRING("IUnitManager"#1034)DOT("."#1046)STRING("h"#1047)QUOTE("""#1048)NL("\n"#1049)
HASH("#"#1050)STRING("include"#1051)WS(" "#1058)QUOTE("""#1059)STRING("IfEditableController"#1060)DOT("."#1080)STRING("h"#1081)QUOTE("""#1082)NL("\n"#1083)
HASH("#"#1084)STRING("include"#1085)WS(" "#1092)QUOTE("""#1093)STRING("IpsSetpoints"#1094)DOT("."#1106)STRING("h"#1107)QUOTE("""#1108)NL("\n"#1109)
HASH("#"#1110)STRING("include"#1111)WS(" "#1118)QUOTE("""#1119)STRING("MocSetpoints"#1120)DOT("."#1132)STRING("h"#1133)QUOTE("""#1134)NL("\n"#1135)
HASH("#"#1136)STRING("include"#1137)WS(" "#1144)QUOTE("""#1145)STRING("ReinitLayerId"#1146)DOT("."#1159)STRING("h"#1160)QUOTE("""#1161)NL("\n"#1162)
HASH("#"#1163)STRING("include"#1164)WS(" "#1171)QUOTE("""#1172)STRING("StateSpaceController"#1173)DOT("."#1193)STRING("h"#1194)QUOTE("""#1195)NL("\n"#1196)
HASH("#"#1197)STRING("include"#1198)WS(" "#1205)QUOTE("""#1206)STRING("TorqueCurrentLimiter"#1207)DOT("."#1227)STRING("h"#1228)QUOTE("""#1229)NL("\n"#1230)
HASH("#"#1231)STRING("include"#1232)WS(" "#1239)QUOTE("""#1240)STRING("TripleBuffer"#1241)DOT("."#1253)STRING("h"#1254)QUOTE("""#1255)NL("\n"#1256)
HASH("#"#1257)STRING("include"#1258)WS(" "#1265)QUOTE("""#1266)STRING("VfController"#1267)DOT("."#1279)STRING("h"#1280)QUOTE("""#1281)NL("\n"#1282)
NL("\n"#1283)
STRING("namespace"#1284)WS(" "#1293)STRING("BMC"#1294)NL("\n"#1297)
-->NL("\n"#1299)
-->STRING("namespace"#1300)WS(" "#1309)STRING("Control"#1310)NL("\n"#1317)
NL("\n"#1319)
---->STRING("namespace"#1320)WS(" "#1329)STRING("MotorControl"#1330)NL("\n"#1342)
NL("\n"#1344)
------>NL("\n"#1345)
doxygencomment(" \class MotorControl"#1349)
------>doxygencomment(" \brief This class manages different controller types e.g. cascade- or state-space-controller for"#1373)
------>doxygencomment(" applicative values - position, velocity, torque and current."#1474)
------>------>STRING("class"#1536)WS(" "#1541)STRING("MotorControl"#1542)COLON(":"#1554)NL("\n"#1555)
------>WS("    "#1556)STRING("public"#1560)WS(" "#1566)STRING("Autogen"#1567)2COLONS("::"#1574)STRING("ComponentBaseClasses"#1576)2COLONS("::"#1596)STRING("ComponentBaseMoc"#1598)COMMA(","#1614)NL("\n"#1615)
------>WS("    "#1616)STRING("public"#1620)WS(" "#1626)STRING("Interfaces"#1627)2COLONS("::"#1637)STRING("IIpsSetpointOwner"#1639)COMMA(","#1656)NL("\n"#1657)
------>WS("    "#1658)STRING("public"#1662)WS(" "#1668)STRING("Interfaces"#1669)2COLONS("::"#1679)STRING("IMotorControl"#1681)COMMA(","#1694)NL("\n"#1695)
------>WS("    "#1696)STRING("public"#1700)WS(" "#1706)STRING("Interfaces"#1707)2COLONS("::"#1717)STRING("ICommutationSignal"#1719)COMMA(","#1737)NL("\n"#1738)
------>WS("    "#1739)STRING("public"#1743)WS(" "#1749)STRING("Interfaces"#1750)2COLONS("::"#1760)STRING("ILimitation"#1762)COMMA(","#1773)NL("\n"#1774)
------>WS("    "#1775)STRING("public"#1779)WS(" "#1785)STRING("Interfaces"#1786)2COLONS("::"#1796)STRING("IReinitComponent"#1798)NL("\n"#1814)
NL("\n"#1816)
-------->STRING("public"#1817)COLON(":"#1823)NL("\n"#1824)
-------->WS("    "#1825)doxygencomment(" Constructor"#1832)
-------->WS("    "#1845)doxygencomment(" \param converter is an object that handles user unit related calculations."#1852)
-------->WS("    "#1928)STRING("MotorControl"#1932)LP("("#1944)STRING("Interfaces"#1945)2COLONS("::"#1955)STRING("IUnitManager"#1957)AND("&"#1969)WS(" "#1970)STRING("converter"#1971)RP(")"#1980)EOC(";"#1981)NL("\n"#1982)
-------->NL("\n"#1983)
-------->WS("    "#1984)doxygencomment(" Use this method to register external components needed by this component"#1991)
-------->WS("    "#2065)doxygencomment(" \param mocSetpoints object containing setpoints for this component"#2072)
-------->WS("    "#2140)doxygencomment(" \param actualValues object containing actual values needed by this component."#2147)
-------->WS("    "#2226)doxygencomment(" \param controlLimits object containing applicative limitations."#2233)
-------->WS("    "#2298)doxygencomment(" \param currentIdSignal object that provides an id setpoint."#2305)
-------->WS("    "#2366)doxygencomment(" \param currentControl object that provides information about the current control state"#2373)
-------->WS("    "#2461)STRING("void"#2465)WS(" "#2469)STRING("registerComponents"#2470)LP("("#2488)STRING("Interfaces"#2489)2COLONS("::"#2499)STRING("MocSetpoints"#2501)MULTIPLY("*"#2513)WS(" "#2514)STRING("mocSetpoints"#2515)COMMA(","#2527)NL("\n"#2528)
-------->WS("                            "#2529)CONST("const"#2557)WS(" "#2562)STRING("Interfaces"#2563)2COLONS("::"#2573)STRING("ActualValuesData"#2575)MULTIPLY("*"#2591)WS(" "#2592)STRING("actualValues"#2593)COMMA(","#2605)NL("\n"#2606)
-------->WS("                            "#2607)CONST("const"#2635)WS(" "#2640)STRING("Interfaces"#2641)2COLONS("::"#2651)STRING("ControlLimits"#2653)MULTIPLY("*"#2666)WS(" "#2667)STRING("controlLimits"#2668)COMMA(","#2681)NL("\n"#2682)
-------->WS("                            "#2683)STRING("Interfaces"#2711)2COLONS("::"#2721)STRING("ICurrentSignal"#2723)MULTIPLY("*"#2737)WS(" "#2738)STRING("currentIdSignal"#2739)COMMA(","#2754)NL("\n"#2755)
-------->WS("                            "#2756)STRING("Interfaces"#2784)2COLONS("::"#2794)STRING("ILimitation"#2796)MULTIPLY("*"#2807)WS(" "#2808)STRING("currentControl"#2809)RP(")"#2823)EOC(";"#2824)NL("\n"#2825)
-------->NL("\n"#2826)
-------->WS("    "#2827)doxygencomment(" Initializes the Motor Control Component"#2834)
-------->WS("    "#2875)doxygencomment(" \param tSample Cycle time of this component (must be greater than 0)"#2882)
-------->WS("    "#2952)doxygencomment(" \param tSlowSample cycle time of the limitation evaluation (must be greater 0)"#2959)
-------->WS("    "#3039)doxygencomment(" \param limitAngleAlterationRate states if the dual use directive applies (request of angle rate limitation)"#3046)
-------->WS("    "#3155)doxygencomment(" \retval RC_SUCCESS for successful initialization. Anything else for failed initialization."#3162)
-------->WS("    "#3254)STRING("FMCReturnCode"#3258)WS(" "#3271)STRING("init"#3272)LP("("#3276)CONST("const"#3277)WS(" "#3282)STRING("FLOAT32"#3283)WS(" "#3290)STRING("tSample"#3291)COMMA(","#3298)NL("\n"#3299)
-------->WS("                       "#3300)CONST("const"#3323)WS(" "#3328)STRING("FLOAT32"#3329)WS(" "#3336)STRING("tSlowSample"#3337)COMMA(","#3348)NL("\n"#3349)
-------->WS("                       "#3350)STRING("BOOL"#3373)WS(" "#3377)STRING("limitAngleAlterationRate"#3378)RP(")"#3402)EOC(";"#3403)NL("\n"#3404)
-------->NL("\n"#3405)
-------->WS("    "#3406)doxygencomment(" \copydoc Interfaces::IMotorControl::getOperationMode"#3413)
-------->WS("    "#3467)STRING("virtual"#3471)WS(" "#3478)STRING("Autogen"#3479)2COLONS("::"#3486)STRING("MocOp"#3488)WS(" "#3493)STRING("getOperationMode"#3494)LP("("#3510)RP(")"#3511)EOC(";"#3512)NL("\n"#3513)
-------->NL("\n"#3514)
-------->WS("    "#3515)doxygencomment(" Worker method. Update of the selected controller."#3522)
-------->WS("    "#3573)STRING("void"#3577)WS(" "#3581)STRING("update"#3582)LP("("#3588)RP(")"#3589)EOC(";"#3590)NL("\n"#3591)
-------->NL("\n"#3592)
-------->WS("    "#3593)doxygencomment(" Calculation of miscellaneous things that can run in a slower task."#3600)
-------->WS("    "#3668)STRING("void"#3672)WS(" "#3676)STRING("updateSlow"#3677)LP("("#3687)RP(")"#3688)EOC(";"#3689)NL("\n"#3690)
-------->NL("\n"#3691)
-------->WS("    "#3692)doxygencomment(" \copydoc BMC::Services::ComponentDirectory::ComponentBase::setInstanceNumbers()"#3699)
-------->WS("    "#3780)STRING("void"#3784)WS(" "#3788)STRING("setInstanceNumbers"#3789)LP("("#3807)CONST("const"#3808)WS(" "#3813)STRING("UINT16"#3814)WS(" "#3820)STRING("axisInstanceNr"#3821)COMMA(","#3835)WS(" "#3836)CONST("const"#3837)WS(" "#3842)STRING("UINT16"#3843)WS(" "#3849)STRING("componentInstanceNr"#3850)RP(")"#3869)EOC(";"#3870)NL("\n"#3871)
-------->NL("\n"#3872)
-------->WS("    "#3873)doxygencomment(" \copydoc BMC::Services::ComponentDirectory::ComponentBase::registerDiagnosisInterfaceAtComponent()"#3880)
-------->WS("    "#3980)STRING("virtual"#3984)WS(" "#3991)STRING("FMCReturnCode"#3992)WS(" "#4005)STRING("registerDiagnosisInterfaceAtComponent"#4006)LP("("#4043)STRING("Interfaces"#4044)2COLONS("::"#4054)STRING("IDiagnosisTriggerInterface"#4056)AND("&"#4082)WS(" "#4083)STRING("triggerDiagnosisMessageInterface"#4084)RP(")"#4116)EOC(";"#4117)NL("\n"#4118)
-------->NL("\n"#4119)
-------->WS("    "#4120)doxygencomment(" \copydoc BMC::Services::ComponentDirectory::ComponentBase::registerComponentAtComponentDirectory()"#4127)
-------->WS("    "#4227)STRING("virtual"#4231)WS(" "#4238)STRING("FMCReturnCode"#4239)WS(" "#4252)STRING("registerComponentAtComponentDirectory"#4253)LP("("#4290)STRING("BMC"#4291)2COLONS("::"#4294)STRING("Services"#4296)2COLONS("::"#4304)STRING("ComponentDirectory"#4306)2COLONS("::"#4324)STRING("IComponentDirectory"#4326)AND("&"#4345)WS(" "#4346)STRING("compDir"#4347)RP(")"#4354)EOC(";"#4355)NL("\n"#4356)
-------->NL("\n"#4357)
-------->WS("    "#4358)doxygencomment(" \copydoc BMC::Services::ComponentDirectory::IData::data_writeValue"#4365)
-------->WS("    "#4433)STRING("virtual"#4437)WS(" "#4444)STRING("FMCReturnCode"#4445)WS(" "#4458)STRING("data_writeValue"#4459)LP("("#4474)CONST("const"#4475)WS(" "#4480)STRING("UINT32"#4481)WS(" "#4487)STRING("dataId"#4488)COMMA(","#4494)WS(" "#4495)CONST("const"#4496)WS(" "#4501)STRING("UINT32"#4502)WS(" "#4508)STRING("arrayStartIndex"#4509)COMMA(","#4524)WS(" "#4525)CONST("const"#4526)WS(" "#4531)STRING("UINT32"#4532)WS(" "#4538)STRING("nrOfElements"#4539)COMMA(","#4551)WS(" "#4552)STRING("void"#4553)MULTIPLY("*"#4557)WS(" "#4558)STRING("writeData"#4559)COMMA(","#4568)WS(" "#4569)CONST("const"#4570)WS(" "#4575)STRING("UINT32"#4576)WS(" "#4582)STRING("nrOfWriteBytes"#4583)COMMA(","#4597)WS(" "#4598)STRING("BMC"#4599)2COLONS("::"#4602)STRING("Services"#4604)2COLONS("::"#4612)STRING("ComponentDirectory"#4614)2COLONS("::"#4632)STRING("DataWriteBuffer"#4634)MULTIPLY("*"#4649)WS(" "#4650)STRING("writeBuffer"#4651)RP(")"#4662)EOC(";"#4663)NL("\n"#4664)
-------->NL("\n"#4665)
-------->WS("    "#4666)doxygencomment(" Returns an interface for the access of the cascade-control parameters."#4673)
-------->WS("    "#4745)STRING("Interfaces"#4749)2COLONS("::"#4759)STRING("ICascadeControlParameterAccess"#4761)MULTIPLY("*"#4791)WS(" "#4792)STRING("getCascadeControl"#4793)LP("("#4810)RP(")"#4811)EOC(";"#4812)NL("\n"#4813)
-------->NL("\n"#4814)
-------->WS("    "#4815)doxygencomment(" Returns an interface for position offset definition."#4822)
-------->WS("    "#4876)STRING("Interfaces"#4880)2COLONS("::"#4890)STRING("IEncoderlessControl"#4892)MULTIPLY("*"#4911)WS(" "#4912)STRING("getEncoderlessControl"#4913)LP("("#4934)RP(")"#4935)EOC(";"#4936)NL("\n"#4937)
-------->NL("\n"#4938)
-------->WS("    "#4939)doxygencomment(" Implements IntelligentPowerStageSetpointValuesData::getSetpointValuesData"#4946)
-------->WS("    "#5021)STRING("virtual"#5025)WS(" "#5032)CONST("const"#5033)WS(" "#5038)STRING("Interfaces"#5039)2COLONS("::"#5049)STRING("IpsSetpoints"#5051)MULTIPLY("*"#5063)WS(" "#5064)STRING("getIpsSetpoints"#5065)LP("("#5080)RP(")"#5081)EOC(";"#5082)NL("\n"#5083)
-------->NL("\n"#5084)
-------->WS("    "#5085)doxygencomment(" \copydoc Interfaces::ICommutationSignal::getElectricalSpeed()"#5092)
-------->WS("    "#5155)STRING("virtual"#5159)WS(" "#5166)STRING("FLOAT32"#5167)WS(" "#5174)STRING("getElectricalSpeed"#5175)LP("("#5193)RP(")"#5194)WS(" "#5195)CONST("const"#5196)EOC(";"#5201)NL("\n"#5202)
-------->NL("\n"#5203)
-------->WS("    "#5204)doxygencomment(" \copydoc Interfaces::ICommutationSignal::getElectricalAngle()"#5211)
-------->WS("    "#5274)STRING("virtual"#5278)WS(" "#5285)STRING("UINT32"#5286)WS(" "#5292)STRING("getElectricalAngle"#5293)LP("("#5311)RP(")"#5312)WS(" "#5313)CONST("const"#5314)EOC(";"#5319)NL("\n"#5320)
-------->NL("\n"#5321)
-------->WS("    "#5322)doxygencomment(" \copydoc Interfaces::IMotorControl::getUnfilteredIqSetpoint"#5329)
-------->WS("    "#5390)STRING("virtual"#5394)WS(" "#5401)STRING("FLOAT32"#5402)WS(" "#5409)STRING("getUnfilteredIqSetpoint"#5410)LP("("#5433)RP(")"#5434)WS(" "#5435)CONST("const"#5436)EOC(";"#5441)NL("\n"#5442)
-------->NL("\n"#5443)
-------->WS("    "#5444)doxygencomment(" \copydoc Interfaces::ILimitation::isLimited"#5451)
-------->WS("    "#5496)STRING("virtual"#5500)WS(" "#5507)STRING("BOOL"#5508)WS(" "#5512)STRING("isLimited"#5513)LP("("#5522)RP(")"#5523)WS(" "#5524)CONST("const"#5525)EOC(";"#5530)NL("\n"#5531)
-------->NL("\n"#5532)
-------->WS("    "#5533)doxygencomment(" \copydoc Interfaces::ILimitation::isVelocityLimited"#5540)
-------->WS("    "#5593)STRING("virtual"#5597)WS(" "#5604)STRING("BOOL"#5605)WS(" "#5609)STRING("isVelocityLimited"#5610)LP("("#5627)RP(")"#5628)WS(" "#5629)CONST("const"#5630)EOC(";"#5635)NL("\n"#5636)
-------->NL("\n"#5637)
-------->WS("    "#5638)doxygencomment(" See IReinitComponent"#5645)
-------->WS("    "#5667)STRING("virtual"#5671)WS(" "#5678)STRING("Autogen"#5679)2COLONS("::"#5686)STRING("InitReturnCode"#5688)WS(" "#5702)STRING("dispose"#5703)LP("("#5710)STRING("Interfaces"#5711)2COLONS("::"#5721)STRING("ReinitLayerId"#5723)WS(" "#5736)STRING("layerId"#5737)RP(")"#5744)EOC(";"#5745)NL("\n"#5746)
-------->WS("    "#5747)doxygencomment(" See IReinitComponent"#5754)
-------->WS("    "#5776)STRING("virtual"#5780)WS(" "#5787)STRING("Autogen"#5788)2COLONS("::"#5795)STRING("InitReturnCode"#5797)WS(" "#5811)STRING("reinit"#5812)LP("("#5818)STRING("Interfaces"#5819)2COLONS("::"#5829)STRING("ReinitLayerId"#5831)WS(" "#5844)STRING("layerId"#5845)RP(")"#5852)EOC(";"#5853)NL("\n"#5854)
-------->STRING("protected"#5855)COLON(":"#5864)NL("\n"#5865)
-------->WS("    "#5866)comment(" ------------------------------------- Methods -----------------------------------------------"#5872)
-------->WS("    "#5967)doxygencomment(" Use this method to initialize the notch filtes."#5974)
-------->WS("    "#6023)STRING("void"#6027)WS(" "#6031)STRING("initNotchFilters"#6032)LP("("#6048)RP(")"#6049)EOC(";"#6050)NL("\n"#6051)
-------->WS("    "#6052)comment(" ------------------------------------ Attributes ---------------------------------------------"#6058)
-------->WS("    "#6153)doxygencomment(" Number of available notch filters."#6160)
-------->WS("    "#6196)STRING("static"#6200)WS(" "#6206)CONST("const"#6207)WS(" "#6212)STRING("UINT32"#6213)WS(" "#6219)STRING("numberOfNotchFilters"#6220)WS(" "#6240)EQUALS("="#6241)WS(" "#6242)NUMBER("3"#6243)EOC(";"#6244)NL("\n"#6245)
-------->WS("    "#6246)doxygencomment(" Filters the iq-current-setpoint that is produced by the active control structures."#6253)
-------->WS("    "#6337)STRING("Utilities"#6341)2COLONS("::"#6350)STRING("FilterNotch"#6352)WS(" "#6363)STRING("notchFilter"#6364)LSQB("["#6375)STRING("numberOfNotchFilters"#6376)RSQB("]"#6396)EOC(";"#6397)NL("\n"#6398)
-------->WS("    "#6399)doxygencomment(" Call interval of the update method."#6406)
-------->WS("    "#6443)STRING("FLOAT32"#6447)WS(" "#6454)STRING("sampleTime"#6455)EOC(";"#6465)NL("\n"#6466)
-------->WS("    "#6467)doxygencomment(" Limits id, iq and torque."#6474)
-------->WS("    "#6501)STRING("TorqueCurrentLimiter"#6505)WS(" "#6525)STRING("limiter"#6526)EOC(";"#6533)NL("\n"#6534)
-------->WS("    "#6535)doxygencomment(" An object that provides a base functionality for sensorless controllers"#6542)
-------->WS("    "#6615)STRING("EncoderlessController"#6619)WS(" "#6640)STRING("baseController"#6641)EOC(";"#6655)NL("\n"#6656)
-------->WS("    "#6657)doxygencomment(" Object that limits the motor angle alteration rate."#6664)
-------->WS("    "#6717)STRING("AngleAlterationRateLimiter"#6721)WS(" "#6747)STRING("angleRateLimiter"#6748)EOC(";"#6764)NL("\n"#6765)
-------->WS("    "#6766)doxygencomment(" Object that tells if a controller runs into a current limitation."#6773)
-------->WS("    "#6840)STRING("Utilities"#6844)2COLONS("::"#6853)STRING("DelayedInputWithFastReset"#6855)WS(" "#6880)STRING("currentLimitation"#6881)EOC(";"#6898)NL("\n"#6899)
-------->WS("    "#6900)doxygencomment(" Object that tells if a controller runs into a velocity limitation."#6907)
-------->WS("    "#6975)STRING("Utilities"#6979)2COLONS("::"#6988)STRING("DelayedInputWithFastReset"#6990)WS(" "#7015)STRING("velocityLimitation"#7016)EOC(";"#7034)NL("\n"#7035)
-------->WS("    "#7036)doxygencomment(" This flag shows if this component has been successfully initialized."#7043)
-------->WS("    "#7113)STRING("BOOL"#7117)WS(" "#7121)STRING("isInitialized"#7122)EOC(";"#7135)NL("\n"#7136)
-------->WS("    "#7137)comment(" ------------------------------ different control structures --------------------------------"#7143)
-------->WS("    "#7237)doxygencomment(" This array holds pointers of controllers that correspond to their indices"#7244)
-------->WS("    "#7319)STRING("AbstractController"#7323)MULTIPLY("*"#7341)WS(" "#7342)STRING("controllers"#7343)LSQB("["#7354)STRING("Autogen"#7355)2COLONS("::"#7362)STRING("MocSt"#7364)2COLONS("::"#7369)STRING("MocSt_INVALID_ENTRY"#7371)RSQB("]"#7390)EOC(";"#7391)NL("\n"#7392)
-------->WS("    "#7393)doxygencomment(" Controller with speed control. Generates its own angles."#7400)
-------->WS("    "#7458)STRING("VfController"#7462)WS(" "#7474)STRING("vfControl"#7475)EOC(";"#7484)NL("\n"#7485)
-------->WS("    "#7486)doxygencomment(" Controller with position/speed/torque control"#7493)
-------->WS("    "#7540)STRING("CascadeControl"#7544)WS(" "#7558)STRING("cascadeControl"#7559)EOC(";"#7573)NL("\n"#7574)
-------->WS("    "#7575)doxygencomment(" Controller witch state control functionality. Currently not implemented."#7582)
-------->WS("    "#7656)STRING("StateSpaceController"#7660)WS(" "#7680)STRING("stateSpaceControl"#7681)EOC(";"#7698)NL("\n"#7699)
-------->WS("    "#7700)doxygencomment(" Controller with position control. Generates its own angles. Uses Id of Id-Manager."#7707)
-------->WS("    "#7791)STRING("IfEditableController"#7795)WS(" "#7815)STRING("ifEditable"#7816)EOC(";"#7826)NL("\n"#7827)
-------->WS("    "#7828)comment(" ---------------------------------- io related things ---------------------------------------"#7834)
-------->WS("    "#7928)doxygencomment(" Output buffer to the subsequent component. Needed to synchronize all contained values."#7935)
-------->WS("    "#8023)STRING("Utilities"#8027)2COLONS("::"#8036)STRING("TripleBuffer"#8038)LESS("<"#8050)STRING("Interfaces"#8051)2COLONS("::"#8061)STRING("IpsSetpoints"#8063)MORE(">"#8075)WS(" "#8076)STRING("ipsTripleBuffer"#8077)EOC(";"#8092)NL("\n"#8093)
-------->WS("    "#8094)doxygencomment(" Pointer to the setpoints for this component (position, velocity, ...)."#8101)
-------->WS("    "#8173)CONST("const"#8177)WS(" "#8182)STRING("Interfaces"#8183)2COLONS("::"#8193)STRING("MocSetpoints"#8195)MULTIPLY("*"#8207)WS(" "#8208)STRING("setpoints"#8209)EOC(";"#8218)NL("\n"#8219)
-------->WS("    "#8220)doxygencomment(" Pointer to the actual values for this component (position, velocity, ...)."#8227)
-------->WS("    "#8303)CONST("const"#8307)WS(" "#8312)STRING("Interfaces"#8313)2COLONS("::"#8323)STRING("ActualValuesData"#8325)MULTIPLY("*"#8341)WS(" "#8342)STRING("actualValues"#8343)EOC(";"#8355)NL("\n"#8356)
-------->WS("    "#8357)doxygencomment(" Pointer to the boundaries for the applicative values."#8364)
-------->WS("    "#8419)CONST("const"#8423)WS(" "#8428)STRING("Interfaces"#8429)2COLONS("::"#8439)STRING("ControlLimits"#8441)MULTIPLY("*"#8454)WS(" "#8455)STRING("controlLimits"#8456)EOC(";"#8469)NL("\n"#8470)
-------->WS("    "#8471)doxygencomment(" Pointer to an object that provides an id-current-setpoint (direct current)."#8478)
-------->WS("    "#8555)CONST("const"#8559)WS(" "#8564)STRING("Interfaces"#8565)2COLONS("::"#8575)STRING("ICurrentSignal"#8577)MULTIPLY("*"#8591)WS(" "#8592)STRING("currentIdSignal"#8593)EOC(";"#8608)NL("\n"#8609)
-------->WS("    "#8610)doxygencomment(" Internal copy of the limitation of the applicative values."#8617)
-------->WS("    "#8677)STRING("Interfaces"#8681)2COLONS("::"#8691)STRING("ControlLimits"#8693)WS(" "#8706)STRING("controlLimitsData"#8707)EOC(";"#8724)NL("\n"#8725)
-------->WS("    "#8726)doxygencomment(" This setpoints for the subsequent component are calculated by the selected controller."#8733)
-------->WS("    "#8821)STRING("Interfaces"#8825)2COLONS("::"#8835)STRING("IpsSetpoints"#8837)WS(" "#8849)STRING("ipsSetpointData"#8850)EOC(";"#8865)NL("\n"#8866)
------>EOC(";"#8868)NL("\n"#8869)
------>NL("\n"#8870)
comment(" namespace BMC"#8876)
